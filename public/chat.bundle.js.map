{"version":3,"sources":["webpack:///./client/icons/EmotionHappyIcon.jsx","webpack:///./client/assets/images/undraw_messaging_app.svg","webpack:///./client/routes/chat/chat-content/content-loading.module.css","webpack:///./client/assets/images/undraw_lost.svg","webpack:///./client/routes/chat/reducer.js","webpack:///./client/routes/chat/chat-content/MessageTextArea.jsx","webpack:///./client/components/popup-menu/index.jsx","webpack:///./client/routes/chat/chat-content/MessageInputArea.jsx","webpack:///./client/routes/chat/chat-content/ChatMessage.jsx","webpack:///./client/routes/chat/chat-content/ContentContainer.jsx","webpack:///./client/routes/chat/chat-content/ContentNoChannel.jsx","webpack:///./client/routes/chat/chat-content/ContentLoading.jsx","webpack:///./client/routes/chat/chat-content/ContentError.jsx","webpack:///./client/icons/ChatIcon.jsx","webpack:///./client/routes/chat/chat-content/ChatContent.jsx","webpack:///./client/routes/chat/sidebar/SidebarChannelButton.jsx","webpack:///./client/components/modal/index.jsx","webpack:///./client/routes/chat/sidebar/NewChannelModal.jsx","webpack:///./client/icons/UserIcon.jsx","webpack:///./client/icons/PlusIcon.jsx","webpack:///./client/routes/chat/sidebar/ChatChannelSidebar.jsx","webpack:///./client/routes/chat/index.jsx","webpack:///./client/components/button/index.jsx","webpack:///./client/hooks/useEffectOnce.js","webpack:///./utils.js","webpack:///./tailwind.config.js","webpack:///./client/components/input/index.jsx"],"names":["EmotionHappyIcon","props","viewBox","width","height","d","module","exports","ChatContext","React","createContext","init","state","socket","io","channels","whoIsTyping","chatMessages","typingTimeout","undefined","currentChannel","isTyping","contentShouldScrollDown","channelFetchError","performEffect","dispatch","type","chatReducer","prev","action","prevState","produce","draft","payload","axios","get","then","response","data","chatChannels","catch","Object","assign","message","_id","channel","clearTimeout","emit","username","user","channelId","timeout","setTimeout","push","chatMessage","index","indexOf","splice","textareaStyle","maxHeight","MessageTextArea","messageInputRef","useContext","UserContext","handleSubmit","useCallback","event","preventDefault","current","value","trim","handleMessageKeyDown","key","shiftKey","handleMessageChange","useEffect","inputElem","style","scrollHeight","className","onSubmit","htmlFor","join","id","rows","placeholder","onChange","onKeyDown","autoComplete","ref","propTypes","PropTypes","oneOfType","func","shape","any","defaultProps","createRef","memo","PopupMenu","bgClassName","children","onClose","isOpen","useEffectOnce","handleEscapeKey","document","addEventListener","removeEventListener","onClick","aria-label","tabIndex","string","node","bool","R","MessageInputArea","emojiMenuOpen","setEmojiMenuOpen","useState","useRef","handleBackgroundClick","handleEmojiMenuButton","handleEmojiClick","emoji","native","displayWhoIsTyping","useMemo","xs","length","person","users","uuidv4","set","title","onSelect","color","theme","colors","blue","ChatMessage","isSafeToUpdate","whenMessageWasSent","setWhenMessageWasSent","shouldRecalculateTime","setShouldRecalculateTime","recalculateTimeInAMinute","sent","DateTime","fromISO","minutesSinceSend","local","diff","toObject","minutes","toRelative","toLocaleString","DATETIME_MED","dateTime","isRequired","ContentContainer","direction","ContentNoChannel","alt","src","noChannelsImage","fontFamily","ContentLoading","styles","spinner","ContentError","channelErrorImage","ChatIcon","ChatContent","channelData","setChannelData","chatMessagesRef","scrollTop","chatChannel","Error","name","messages","map","SidebarChannelButton","changeChannel","fetchingChannel","Modal","NewChannelModal","form","useForm","handleNewChannelSubmit","post","headers","Authorization","token","setValue","clearError","handleRequestValidationError","register","required","errors","overrideColors","User","PlusIcon","ChatChannelSidebar","setUser","newChannelMenuOpen","setNewChannelMenuOpen","userMenuOpen","setUserMenuOpen","history","useHistory","handleNewChannelMenuClick","handleUserButtonClick","handleSignoutClick","UserIcon","arrayOf","Chat","useReducer","on","close","bind","replace","chatContextValue","Provider","Button","variant","rest","classVariants","oneOf","fn","validationResult","require","resolveConfig","tailwindConfig","hasProps","curry","obj","compose","all","identity","values","pickAll","error","paramErrors","forEachObjIndexed","setError","msg","inspect","x","console","log","handleValidation","req","res","next","isEmpty","status","json","mapped","variants","textColor","backgroundColor","extend","display","classes","Input","forwardRef"],"mappings":"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","file":"chat.bundle.js","sourcesContent":["import React from 'react';\n\nfunction EmotionHappyIcon(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M12 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm-3.54-4.46a1 1 0 0 1 1.42-1.42 3 3 0 0 0 4.24 0 1 1 0 0 1 1.42 1.42 5 5 0 0 1-7.08 0zM9 11a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm6 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2z\" />\n    </svg>\n  );\n}\n\nexport default EmotionHappyIcon;\n","module.exports = __webpack_public_path__ + \"0ce16bb678d46f2fa7ee900a836cdc8e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner-parent\":\"_1bXKkmuCyRlq5K6H1MN-3a\",\"spinner\":\"_1d-XUURtq_Usrxlm7jbYcI\",\"spin\":\"_28jbo546yynUOWDADfDkZ3\"};","module.exports = __webpack_public_path__ + \"ba4e5306b2a697394104eb080eac80c9.svg\";","import React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport produce from 'immer';\n\nexport const ChatContext = React.createContext(null);\n\nexport function init() {\n  // reducer returns updated state and an eventual effect.\n  // inspired by how Elm handles effects:\n  // https://guide.elm-lang.org/effects/http.html\n  return {\n    state: {\n      socket: io(),\n      channels: [],\n      whoIsTyping: [],\n      chatMessages: [],\n      typingTimeout: undefined,\n      currentChannel: undefined,\n      isTyping: false,\n      contentShouldScrollDown: false,\n      channelFetchError: false,\n    },\n    performEffect: dispatch => {\n      dispatch({ type: 'fetch-channels' });\n    },\n  };\n}\n\n/* eslint-disable no-param-reassign */\nfunction chatReducer(prev, action) {\n  const prevState = prev.state;\n\n  return produce(prev, draft => {\n    const { payload } = action;\n    const { socket } = draft.state;\n\n    draft.state.contentShouldScrollDown = false;\n    draft.performEffect = undefined;\n\n    // eslint-disable-next-line default-case\n    switch (action.type) {\n      // get a list of all channels a user can join\n      case 'fetch-channels':\n        draft.state.channelFetchError = false;\n\n        draft.performEffect = dispatch => {\n          axios\n            .get('/api/chat-channels')\n            .then(response => response.data.chatChannels)\n            .then(channels =>\n              dispatch({ type: 'set-channels', payload: { channels } }),\n            )\n            .catch(() => dispatch({ type: 'channel-list-fetch-error' }));\n        };\n        break;\n\n      // after fetch-channels: set the list of channels\n      case 'set-channels':\n        draft.state.channels = payload.channels;\n        break;\n\n      // after fetch-channels: update state after fetch error\n      case 'channel-list-fetch-error':\n        draft.state.channelFetchError = true;\n        break;\n\n      // user chooses a channel from the sidebar\n      case 'change-channel':\n        if (!socket) {\n          break;\n        }\n\n        Object.assign(draft.state, {\n          message: '',\n          isTyping: false,\n          typingTimeout: undefined,\n          currentChannel:\n            draft.state.currentChannel &&\n            draft.state.currentChannel._id === payload.channel._id\n              ? undefined\n              : payload.channel,\n          chatMessages: [],\n          whoIsTyping: [],\n        });\n\n        draft.performEffect = () => {\n          clearTimeout(prevState.typingTimeout);\n          socket.emit('join channel', payload.channel._id);\n\n          if (prevState.currentChannel) {\n            socket.emit('stop typing', {\n              username: payload.user.username,\n              channelId: prevState.currentChannel._id,\n            });\n\n            socket.emit('leave channel', prevState.currentChannel._id);\n          }\n        };\n\n        break;\n\n      // user starts typing on text message input. emit \"user is\n      // typing\" message and start a timeout that will remove \"user\n      // is typing\" message\n      case 'start-typing':\n        if (!socket) {\n          break;\n        }\n\n        draft.state.isTyping = true;\n\n        draft.performEffect = dispatch => {\n          dispatch({\n            type: 'set-typing-timeout',\n            payload: {\n              timeout: setTimeout(() => {\n                dispatch({\n                  type: 'stop-typing',\n                  payload: { user: payload.user },\n                });\n              }, 4000),\n            },\n          });\n\n          if (!prevState.isTyping) {\n            socket.emit('start typing', {\n              username: payload.user.username,\n              channelId: prevState.currentChannel._id,\n            });\n          }\n\n          clearTimeout(prevState.typingTimeout);\n        };\n\n        break;\n\n      // this action is used to perform setTimeout without making a\n      // side effect on state update\n      case 'set-typing-timeout':\n        draft.state.typingTimeout = payload.timeout;\n        break;\n\n      // after timeout: emit \"stop typing\" to all users.\n      case 'stop-typing':\n        if (!socket) {\n          break;\n        }\n\n        draft.state.isTyping = false;\n\n        draft.performEffect = () => {\n          clearTimeout(prevState.typingTimeout);\n\n          socket.emit('stop typing', {\n            username: payload.user.username,\n            channelId: prevState.currentChannel._id,\n          });\n        };\n\n        break;\n\n      // send a chat message to users in the channel. this will also\n      // save the same message to the database\n      case 'send-message':\n        if (!socket || !payload.message) {\n          break;\n        }\n\n        draft.state.isTyping = false;\n\n        draft.performEffect = () => {\n          clearTimeout(prevState.typingTimeout);\n\n          socket.emit('chat message', {\n            user: payload.user,\n            message: payload.message,\n            channelId: prevState.currentChannel._id,\n          });\n\n          socket.emit('stop typing', {\n            username: payload.user.username,\n            channelId: prevState.currentChannel._id,\n          });\n        };\n\n        break;\n\n      // action used when joining channel and on a new message\n      case 'scroll-chat-to-bottom':\n        draft.state.contentShouldScrollDown = true;\n        break;\n\n      // add live message recieved to the current state. this is okay\n      // since messages that are stale (not recieved through\n      // websocket) are fetched from the database instead.\n      case 'recieve-message':\n        draft.state.chatMessages.push(payload.chatMessage);\n        draft.state.contentShouldScrollDown = true;\n        break;\n\n      // add user to the \"user is typing\" section\n      case 'add-user-typing':\n        draft.state.whoIsTyping.push(payload.username);\n        break;\n\n      // remove user to the \"user is typing\" section\n      case 'remove-user-typing': {\n        const index = prevState.whoIsTyping.indexOf(payload.username);\n\n        if (index !== -1) {\n          draft.state.whoIsTyping.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  });\n}\n/* eslint-enable no-param-reassign */\n\nexport default chatReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { ChatContext } from '../reducer';\nimport { UserContext } from '#/Provider';\n\nconst textareaStyle = { maxHeight: '16em' };\n\nfunction MessageTextArea({ messageInputRef }) {\n  const [, dispatch] = React.useContext(ChatContext);\n  const [user] = React.useContext(UserContext);\n\n  const handleSubmit = React.useCallback(\n    event => {\n      event.preventDefault();\n\n      dispatch({\n        type: 'send-message',\n        payload: { user, message: messageInputRef.current.value.trim() },\n      });\n\n      // eslint-disable-next-line no-param-reassign\n      messageInputRef.current.value = '';\n    },\n    [dispatch, user, messageInputRef],\n  );\n\n  const handleMessageKeyDown = React.useCallback(\n    event => {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        handleSubmit(event);\n      }\n    },\n    [handleSubmit],\n  );\n\n  const handleMessageChange = React.useCallback(() => {\n    dispatch({ type: 'start-typing', payload: { user } });\n  }, [dispatch, user]);\n\n  React.useEffect(() => {\n    const inputElem = messageInputRef.current;\n\n    if (inputElem) {\n      inputElem.style.height = 'auto'; // shrink before growing\n      inputElem.style.height = `${inputElem.scrollHeight}px`;\n    }\n  });\n\n  return (\n    <form className=\"flex flex-grow mr-4\" onSubmit={handleSubmit}>\n      <label className=\"w-full flex items-center\" htmlFor=\"message-input\">\n        <div className=\"sr-only\">Send a message</div>\n        <textarea\n          className={[\n            'bg-gray-200',\n            'w-full',\n            'placeholder-gray-800',\n            'resize-none',\n            'outline-none',\n            'overflow-y-auto',\n            'overflow-x-hidden',\n            'px-3',\n            'py-2',\n            'rounded-l-lg',\n          ].join(' ')}\n          style={textareaStyle}\n          id=\"message-input\"\n          rows=\"1\"\n          placeholder=\"Send a message\"\n          onChange={handleMessageChange}\n          onKeyDown={handleMessageKeyDown}\n          autoComplete=\"off\"\n          ref={messageInputRef}\n        />\n      </label>\n    </form>\n  );\n}\n\nMessageTextArea.propTypes = {\n  messageInputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]),\n};\n\nMessageTextArea.defaultProps = {\n  messageInputRef: React.createRef(),\n};\n\nexport default React.memo(MessageTextArea);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as R from 'ramda';\nimport useEffectOnce from '#/hooks/useEffectOnce';\n\nfunction PopupMenu({ bgClassName, children, onClose, isOpen }) {\n  useEffectOnce(() => {\n    // handling escape key is from a video (8:45):\n    // https://tailwindcss.com/course/making-the-dropdown-interactive/\n    function handleEscapeKey(event) {\n      if (event.key === 'Esc' || event.key === 'Escape') {\n        onClose(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleEscapeKey);\n    return () => document.removeEventListener('keydown', handleEscapeKey);\n  });\n\n  return (\n    <div className={isOpen ? '' : 'invisible'}>\n      <button\n        type=\"button\"\n        className={`fixed inset-0 w-full h-full cursor-default z-40 ${bgClassName}`}\n        onClick={onClose}\n        aria-label=\"Close menu\"\n        tabIndex=\"-1\"\n      />\n      <div className=\"relative z-50\">{children}</div>\n    </div>\n  );\n}\n\nPopupMenu.propTypes = {\n  bgClassName: PropTypes.string,\n  children: PropTypes.node,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nPopupMenu.defaultProps = {\n  bgClassName: '',\n  children: null,\n  onClose: R.always(),\n  isOpen: false,\n};\n\nexport default PopupMenu;\n","import React, { Fragment } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport * as R from 'ramda';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport MessageTextArea from './MessageTextArea';\nimport { ChatContext } from '../reducer';\nimport EmotionHappyIcon from '#/icons/EmotionHappyIcon';\nimport PopupMenu from '#/components/popup-menu';\nimport { theme } from '#/../utils';\nimport './message-input-area.css';\n\nfunction MessageInputArea() {\n  const [state] = React.useContext(ChatContext);\n  const [emojiMenuOpen, setEmojiMenuOpen] = React.useState(false);\n  const messageInputRef = React.useRef(null);\n\n  const handleBackgroundClick = React.useCallback(() => {\n    setEmojiMenuOpen(false);\n  }, []);\n\n  const handleEmojiMenuButton = React.useCallback(() => {\n    setEmojiMenuOpen(R.not);\n  }, []);\n\n  const handleEmojiClick = React.useCallback(\n    emoji => {\n      messageInputRef.current.value += emoji.native;\n    },\n    [messageInputRef],\n  );\n\n  const displayWhoIsTyping = React.useMemo(\n    () =>\n      R.compose(\n        R.cond([\n          [R.isEmpty, () => <>&nbsp;</>],\n          [xs => xs.length === 1, person => <>{person} is typing...</>],\n          // (length + 1) / 2 counts the number of users typing since\n          // the array contains users as well as a string in between.\n          // [<>user1</>, \" and \", <>user2</>]\n          [xs => (xs.length + 1) / 2 <= 3, users => <>{users} are typing...</>],\n          [R.T, () => 'Several people are typing...'],\n        ]),\n        R.map(node => <Fragment key={uuidv4()}>{node}</Fragment>),\n        R.intersperse(' and '),\n        R.map(username => <span className=\"font-bold\">{username}</span>),\n      )(state.whoIsTyping),\n    [state.whoIsTyping],\n  );\n\n  return (\n    <div className=\"mt-6 mb-1 mx-6\">\n      <div className=\"flex items-center -mb-1\">\n        <div className=\"rounded-lg bg-gray-200 flex w-full\">\n          <MessageTextArea messageInputRef={messageInputRef} />\n          <button\n            className=\"px-2 text-gray-600 hover:text-gray-700\"\n            type=\"button\"\n            onClick={handleEmojiMenuButton}\n          >\n            <EmotionHappyIcon className=\"fill-current\" />\n          </button>\n          <PopupMenu onClose={handleBackgroundClick} isOpen={emojiMenuOpen}>\n            <div className=\"absolute right-0 bottom-0 mb-12 shadow-md\">\n              <Picker\n                set=\"google\"\n                emoji=\"\"\n                title=\"\"\n                onSelect={handleEmojiClick}\n                color={theme.colors.blue[500]}\n              />\n            </div>\n          </PopupMenu>\n        </div>\n      </div>\n      <div className=\"ml-2 text-gray-700 mt-1\">{displayWhoIsTyping}</div>\n    </div>\n  );\n}\n\nexport default React.memo(MessageInputArea);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DateTime } from 'luxon';\nimport * as R from 'ramda';\nimport useEffectOnce from '#/hooks/useEffectOnce';\n\nfunction ChatMessage({ message }) {\n  const isSafeToUpdate = React.useRef(true);\n  const [whenMessageWasSent, setWhenMessageWasSent] = React.useState(null);\n  const [shouldRecalculateTime, setShouldRecalculateTime] = React.useState(\n    true,\n  );\n\n  const recalculateTimeInAMinute = React.useCallback(() => {\n    setTimeout(() => {\n      if (isSafeToUpdate.current) {\n        setShouldRecalculateTime(true);\n      }\n    }, 60 * 1000);\n  }, [setShouldRecalculateTime]);\n\n  React.useEffect(() => {\n    if (shouldRecalculateTime) {\n      setShouldRecalculateTime(false);\n\n      const sent = DateTime.fromISO(message.sent);\n\n      const minutesSinceSend = DateTime.local()\n        .diff(sent, 'minutes')\n        .toObject().minutes;\n\n      R.o(\n        setWhenMessageWasSent,\n        R.cond([\n          [R.gte(1), R.o(() => 'Just now', recalculateTimeInAMinute)],\n          [R.gte(10), R.o(() => sent.toRelative(), recalculateTimeInAMinute)],\n          [R.T, () => sent.toLocaleString(DateTime.DATETIME_MED)],\n        ]),\n      )(minutesSinceSend);\n    }\n  }, [\n    message.sent,\n    whenMessageWasSent,\n    shouldRecalculateTime,\n    recalculateTimeInAMinute,\n  ]);\n\n  useEffectOnce(() => () => {\n    isSafeToUpdate.current = false;\n  });\n\n  return (\n    <div className=\"my-3\">\n      <div>\n        <span className=\"font-bold mr-1\">\n          {message.user ? message.user.username : <>&nbsp;</>}\n        </span>\n        <span className=\"text-xs text-gray-700\">\n          <time dateTime={message.sent}>{whenMessageWasSent}</time>\n        </span>\n      </div>\n      <div className=\"whitespace-pre-line\">{message.message}</div>\n    </div>\n  );\n}\n\nChatMessage.propTypes = {\n  message: PropTypes.shape({\n    user: PropTypes.shape({\n      username: PropTypes.string,\n    }),\n    sent: PropTypes.string, // ISO date\n    message: PropTypes.string,\n  }).isRequired,\n};\n\nexport default React.memo(ChatMessage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ContentContainer({ children, direction }) {\n  return (\n    <div\n      className={`my-8 flex flex-grow bg-white rounded-lg shadow-xl ${direction}`}\n    >\n      {children}\n    </div>\n  );\n}\n\nContentContainer.propTypes = {\n  children: PropTypes.node,\n  direction: PropTypes.string,\n};\n\nContentContainer.defaultProps = {\n  children: null,\n  direction: 'flex-row',\n};\n\nexport default ContentContainer;\n","import React from 'react';\nimport ContentContainer from './ContentContainer';\nimport noChannelsImage from '#/assets/images/undraw_messaging_app.svg';\n\nfunction ContentNoChannel() {\n  return (\n    <ContentContainer>\n      <div className=\"relative flex flex-grow items-center overflow-hidden\">\n        <img\n          className=\"absolute opacity-25 select-none right-0\"\n          alt=\"Woman looking at phone with chat message icon\"\n          src={noChannelsImage}\n        />\n        <div className=\"mx-12 mb-8 z-10\">\n          <h1\n            className=\"text-5xl whitespace-normal leading-tight font-bold\"\n            style={{ fontFamily: 'Raleway, sans-serif' }}\n          >\n            No channel selected\n          </h1>\n          <p className=\"text-gray-700 text-xl mt-4\">\n            To start chatting, join or create a channel from the sidebar\n          </p>\n        </div>\n      </div>\n    </ContentContainer>\n  );\n}\n\nexport default ContentNoChannel;\n","import React from 'react';\nimport ContentContainer from './ContentContainer';\nimport styles from './content-loading.module.css';\n\nfunction ContentLoading() {\n  return (\n    <ContentContainer>\n      <div className=\"flex flex-grow justify-center items-center\">\n        <h1 className=\"text-2xl text-gray-700\">Loading...</h1>\n        <div\n          className={`w-48 h-48 flex justify-center items-center ${\n            styles['spinner-parent']\n          }`}\n        >\n          <div\n            className={`rounded-full w-20 h-20 bg-blue-200 ${styles.spinner}`}\n          />\n        </div>\n      </div>\n    </ContentContainer>\n  );\n}\n\nexport default ContentLoading;\n","import React from 'react';\nimport ContentContainer from './ContentContainer';\nimport channelErrorImage from '#/assets/images/undraw_lost.svg';\n\nfunction ContentError() {\n  return (\n    <ContentContainer>\n      <div className=\"flex flex-col items-center justify-center\">\n        <div className=\"ml-8\">\n          <h1\n            className=\"text-5xl whitespace-normal leading-tight font-bold\"\n            style={{ fontFamily: 'Raleway, sans-serif' }}\n          >\n            A server error has occurred.\n          </h1>\n          <p className=\"text-gray-700 text-xl mt-2 mb-5\">\n            Please try again later\n          </p>\n        </div>\n        <img\n          className=\"w-3/5\"\n          alt=\"Man looking at map\"\n          src={channelErrorImage}\n        />\n      </div>\n    </ContentContainer>\n  );\n}\n\nexport default ContentError;\n","import React from 'react';\n\nfunction ChatIcon(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M6 14H4a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h12a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v13a1 1 0 0 1-1.7.7L16.58 18H8a2 2 0 0 1-2-2v-2zm0-2V8c0-1.1.9-2 2-2h8V4H4v8h2zm14-4H8v8h9a1 1 0 0 1 .7.3l2.3 2.29V8z\" />\n    </svg>\n  );\n}\n\nexport default ChatIcon;\n","import React from 'react';\nimport axios from 'axios';\nimport { ChatContext } from '../reducer';\nimport MessageInputArea from './MessageInputArea';\nimport ChatMessage from './ChatMessage';\nimport ContentNoChannel from './ContentNoChannel';\nimport ContentLoading from './ContentLoading';\nimport ContentError from './ContentError';\nimport ContentContainer from './ContentContainer';\nimport ChatIcon from '#/icons/ChatIcon';\n\nfunction ChatContent() {\n  const [state, dispatch] = React.useContext(ChatContext);\n  // either chatchannel or error object\n  const [channelData, setChannelData] = React.useState(undefined);\n  // reference to messages container. it's used to set scroll position\n  const chatMessagesRef = React.useRef(null);\n\n  React.useEffect(() => {\n    if (state.contentShouldScrollDown && chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [state.contentShouldScrollDown]);\n\n  React.useEffect(() => {\n    setChannelData(undefined);\n\n    // if a channel is selected, fetch the channel data.\n    if (state.currentChannel) {\n      axios\n        .get(`/api/chat-channels/${state.currentChannel._id}?limit=9999`)\n        .then(response => response.data)\n        .then(data => data.chatChannel)\n        .then(setChannelData)\n        .then(() => dispatch({ type: 'scroll-chat-to-bottom' }))\n        .catch(() => setChannelData(new Error('A server error has occurred.')));\n    }\n  }, [state.currentChannel, dispatch]);\n\n  if (!state.currentChannel) {\n    return <ContentNoChannel />;\n  }\n\n  if (!channelData) {\n    return <ContentLoading />;\n  }\n\n  if (channelData instanceof Error) {\n    return <ContentError />;\n  }\n\n  return (\n    <ContentContainer direction=\"flex-col\">\n      <div className=\"mt-4 mb-3 mx-6\">\n        <h1 className=\"text-xl font-bold text-gray-900\">\n          <ChatIcon className=\"fill-current inline mr-4 text-gray-700\" />\n          {channelData.name}\n        </h1>\n      </div>\n      <hr />\n      <div className=\"flex-grow px-8 overflow-y-scroll\" ref={chatMessagesRef}>\n        <div className=\"relative\">\n          <div className=\"absolute py-4 w-full break-words pr-24\">\n            {channelData.messages &&\n              channelData.messages.map(chatMessage => (\n                <ChatMessage key={chatMessage._id} message={chatMessage} />\n              ))}\n            {state.chatMessages.map(chatMessage => (\n              <ChatMessage key={chatMessage._id} message={chatMessage} />\n            ))}\n          </div>\n        </div>\n      </div>\n      <hr />\n      <MessageInputArea />\n    </ContentContainer>\n  );\n}\n\nexport default React.memo(ChatContent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as R from 'ramda';\nimport { ChatContext } from '../reducer';\nimport { UserContext } from '#/Provider';\n\nfunction SidebarChannelButton({ channel }) {\n  const [state, dispatch] = React.useContext(ChatContext);\n  const [user] = React.useContext(UserContext);\n\n  const changeChannel = React.useCallback(\n    () => dispatch({ type: 'change-channel', payload: { channel, user } }),\n    [dispatch, user, channel],\n  );\n\n  return (\n    <button\n      className={`block w-full text-left p-1 pl-4 rounded-lg truncate font-bold ${\n        state.currentChannel && state.currentChannel._id === channel._id\n          ? 'text-blue-700 hover:text-blue-900 bg-blue-100'\n          : 'hover:text-gray-900 hover:bg-gray-200'\n      }`}\n      type=\"button\"\n      onClick={state.fetchingChannel ? R.always() : changeChannel}\n    >\n      {channel.name}\n    </button>\n  );\n}\n\nSidebarChannelButton.propTypes = {\n  channel: PropTypes.shape({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default React.memo(SidebarChannelButton);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as R from 'ramda';\nimport PopupMenu from '#/components/popup-menu';\n\nfunction Modal({ bgClassName, onClose, isOpen, children }) {\n  return (\n    <PopupMenu bgClassName={bgClassName} onClose={onClose} isOpen={isOpen}>\n      <div className=\"fixed w-screen h-screen inset-0 pointer-events-none\">\n        <div className=\"flex w-screen h-screen items-center justify-center\">\n          <div className=\"pointer-events-auto\">{children}</div>\n        </div>\n      </div>\n    </PopupMenu>\n  );\n}\n\nModal.propTypes = {\n  bgClassName: PropTypes.string,\n  children: PropTypes.node,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nModal.defaultProps = {\n  bgClassName: 'bg-gray-900 opacity-25',\n  children: null,\n  onClose: R.always(),\n  isOpen: false,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useForm from 'react-hook-form';\nimport axios from 'axios';\nimport * as R from 'ramda';\nimport { ChatContext } from '../reducer';\nimport Modal from '#/components/modal';\nimport Input from '#/components/input';\nimport Button from '#/components/button';\nimport { UserContext } from '#/Provider';\nimport { handleRequestValidationError } from '#/../utils';\n\nfunction NewChannelModal({ isOpen, onClose }) {\n  const [, dispatch] = React.useContext(ChatContext);\n  const form = useForm();\n  const [user] = React.useContext(UserContext);\n\n  const handleNewChannelSubmit = React.useCallback(\n    data => {\n      if (!user) {\n        return;\n      }\n\n      axios\n        .post('/api/chat-channels', data, {\n          headers: { Authorization: user.token },\n        })\n        .then(onClose)\n        .then(() => form.setValue('name', ''))\n        .then(() => form.clearError())\n        .then(() => dispatch({ type: 'fetch-channels' }))\n        .catch(handleRequestValidationError(form));\n    },\n    [user, onClose, form, dispatch],\n  );\n\n  return (\n    <Modal onClose={onClose} isOpen={isOpen}>\n      <form\n        className=\"shadow-lg\"\n        onSubmit={form.handleSubmit(handleNewChannelSubmit)}\n        style={{ width: 400 }}\n      >\n        <div className=\"p-8 pb-4 bg-white rounded-t border-solid border-blue-500 border-t-4\">\n          <h1 className=\"text-3xl font-light mb-4\">Create a Channel</h1>\n          <label htmlFor=\"add-channel-input\">\n            <div className=\"sr-only\">Channel Name</div>\n            <Input\n              className=\"w-full\"\n              id=\"add-channel-input\"\n              name=\"name\"\n              placeholder=\"Enter Channel Name\"\n              ref={form.register({ required: 'Please enter a channel name' })}\n            />\n          </label>\n          <span className=\"text-xs text-red-700 ml-1\">\n            {form.errors.name ? form.errors.name.message : <>&nbsp;</>}\n          </span>\n        </div>\n        <div className=\"p-6 text-right bg-gray-100 rounded-b\">\n          <Button\n            className=\"bg-gray-100 hover:bg-gray-200 text-gray-900 shadow-none hover:shadow-none\"\n            type=\"button\"\n            onClick={onClose}\n            overrideColors\n          >\n            Cancel\n          </Button>\n          <Button\n            className=\"ml-4 bg-blue-700 hover:bg-blue-800 text-gray-100\"\n            type=\"submit\"\n            overrideColors\n          >\n            Create\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nNewChannelModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n};\n\nNewChannelModal.defaultProps = {\n  isOpen: false,\n  onClose: R.always(),\n};\n\nexport default React.memo(NewChannelModal);\n","import React from 'react';\n\nfunction User(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M12 12a5 5 0 1 1 0-10 5 5 0 0 1 0 10zm0-2a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm9 11a1 1 0 0 1-2 0v-2a3 3 0 0 0-3-3H8a3 3 0 0 0-3 3v2a1 1 0 0 1-2 0v-2a5 5 0 0 1 5-5h8a5 5 0 0 1 5 5v2z\" />\n    </svg>\n  );\n}\n\nexport default User;\n","import React from 'react';\n\nfunction PlusIcon(props) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M17 11a1 1 0 0 1 0 2h-4v4a1 1 0 0 1-2 0v-4H7a1 1 0 0 1 0-2h4V7a1 1 0 0 1 2 0v4h4z\" />\n    </svg>\n  );\n}\n\nexport default PlusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport * as R from 'ramda';\nimport SidebarChannelButton from './SidebarChannelButton';\nimport NewChannelModal from './NewChannelModal';\nimport { UserContext } from '#/Provider';\nimport PopupMenu from '#/components/popup-menu';\nimport UserIcon from '#/icons/UserIcon';\nimport PlusIcon from '#/icons/PlusIcon';\n\nfunction ChatChannelSidebar({ channels }) {\n  const [user, setUser] = React.useContext(UserContext);\n  // modal visibilty state for adding a new channel\n  const [newChannelMenuOpen, setNewChannelMenuOpen] = React.useState(false);\n  // menu visibilty state when user clicks on their username\n  const [userMenuOpen, setUserMenuOpen] = React.useState(false);\n  const history = useHistory();\n\n  // close menu when user clicks outside of menu\n  const handleBackgroundClick = React.useCallback(() => {\n    setNewChannelMenuOpen(false);\n    setUserMenuOpen(false);\n  }, []);\n\n  const handleNewChannelMenuClick = React.useCallback(() => {\n    setNewChannelMenuOpen(R.not);\n  }, []);\n\n  const handleUserButtonClick = React.useCallback(() => {\n    setUserMenuOpen(R.not);\n  }, []);\n\n  // remove user from localStorage and go to homepage\n  const handleSignoutClick = React.useCallback(() => {\n    setUser(null);\n    history.push('/');\n  }, [setUser, history]);\n\n  return (\n    <div className=\"h-screen w-56 px-2 mr-8 overflow-y-auto\">\n      <div className=\"relative\">\n        <div className=\"absolute w-full py-12\">\n          <button\n            className=\"w-full hover:bg-gray-200 rounded-lg p-1 pl-2\"\n            type=\"button\"\n            onClick={handleUserButtonClick}\n          >\n            <div className=\"flex items-center\">\n              <UserIcon className=\"fill-current text-gray-600\" />\n              <span className=\"ml-4 font-bold text-lg text-gray-900\">\n                {user && user.username}\n              </span>\n            </div>\n          </button>\n          <PopupMenu onClose={handleBackgroundClick} isOpen={userMenuOpen}>\n            <div className=\"absolute mt-2 bg-white rounded py-4 shadow-md\">\n              <button\n                className=\"px-8 py-1 hover:bg-blue-100 hover:text-blue-700\"\n                type=\"button\"\n                onClick={handleSignoutClick}\n              >\n                Sign out\n              </button>\n            </div>\n          </PopupMenu>\n          <div className=\"text-gray-700 font-bold\">\n            <div className=\"mt-8 mb-1 uppercase tracking-wide text-xs\">\n              Channels\n            </div>\n            {channels.map(channel => (\n              <SidebarChannelButton key={channel._id} channel={channel} />\n            ))}\n            <div className=\"mt-8\">\n              <button\n                type=\"button\"\n                className=\"block w-full flex items-center rounded-lg hover:bg-gray-200 text-gray-700 hover:text-gray-900 p-1\"\n                onClick={handleNewChannelMenuClick}\n              >\n                <PlusIcon className=\"fill-current text-gray-600 mr-1\" />\n                New Channel\n              </button>\n              <div className=\"font-normal\">\n                <NewChannelModal\n                  isOpen={newChannelMenuOpen}\n                  onClose={handleBackgroundClick}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nChatChannelSidebar.propTypes = {\n  channels: PropTypes.arrayOf(\n    PropTypes.shape({\n      _id: PropTypes.string,\n      name: PropTypes.string,\n    }),\n  ),\n};\n\nChatChannelSidebar.defaultProps = {\n  channels: [],\n};\n\nexport default React.memo(ChatChannelSidebar);\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ChatContent from './chat-content/ChatContent';\nimport ChatChannelSidebar from './sidebar/ChatChannelSidebar';\nimport chatReducer, { ChatContext, init } from './reducer';\nimport { UserContext } from '#/Provider';\nimport useEffectOnce from '#/hooks/useEffectOnce';\n\nfunction Chat() {\n  const [{ state, performEffect }, dispatch] = React.useReducer(\n    chatReducer,\n    undefined,\n    init,\n  );\n  const history = useHistory();\n  const [user] = React.useContext(UserContext);\n\n  // subscribe to socket emit events\n  useEffectOnce(() => {\n    const { socket } = state;\n\n    // handle chat messages\n    socket.on('chat message', chatMessage =>\n      dispatch({ type: 'recieve-message', payload: { chatMessage } }),\n    );\n\n    // handle \"user is typing\"\n    socket.on('start typing', username =>\n      dispatch({ type: 'add-user-typing', payload: { username } }),\n    );\n\n    // remove \"user is typing\"\n    socket.on('stop typing', username =>\n      dispatch({ type: 'remove-user-typing', payload: { username } }),\n    );\n\n    return socket.close.bind(socket);\n  });\n\n  // go to login page if user is logged out\n  useEffectOnce(() => {\n    if (!user) {\n      history.replace('/login');\n    }\n  }, [history, user]);\n\n  // perform side effect after state update\n  React.useEffect(() => {\n    if (performEffect) {\n      performEffect(dispatch);\n    }\n  }, [dispatch, performEffect]);\n\n  const chatContextValue = React.useMemo(() => [state, dispatch], [state]);\n\n  return (\n    <ChatContext.Provider value={chatContextValue}>\n      <div className=\"container mx-auto\">\n        <div className=\"flex\">\n          <ChatChannelSidebar channels={state.channels} />\n          <div className=\"h-screen flex flex-grow\">\n            <ChatContent />\n          </div>\n        </div>\n      </div>\n    </ChatContext.Provider>\n  );\n}\n\nexport default Chat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classes = 'rounded focus:shadow-outline cursor-pointer';\nconst colors = 'bg-gray-700 hover:bg-gray-800 text-gray-100';\n\nfunction Button({\n  className,\n  children,\n  type,\n  overrideColors,\n  variant,\n  ...rest\n}) {\n  let classVariants;\n\n  if (variant === 'big') {\n    classVariants = 'px-12 py-4 font-bold shadow-md hover:shadow-lg';\n  } else {\n    classVariants = 'px-4 py-2 shadow hover:shadow-md';\n  }\n\n  return (\n    // eslint-disable-next-line react/button-has-type\n    <button\n      className={`\n        ${overrideColors ? '' : colors}\n        ${classes} ${classVariants} ${className}\n      `}\n      type={type}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  type: PropTypes.string,\n  variant: PropTypes.oneOf(['big', undefined]),\n  overrideColors: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  className: '',\n  children: null,\n  type: 'button',\n  variant: undefined,\n  overrideColors: false,\n};\n\nexport default Button;\n","import React from 'react';\n\n// useEffect, but only on mount\nfunction useEffectOnce(fn) {\n  React.useEffect(fn, []);\n  return null;\n}\n\nexport default useEffectOnce;\n","const { validationResult } = require('express-validator');\nconst R = require('ramda');\n// https://tailwindcss.com/docs/configuration/#referencing-in-javascript\nconst resolveConfig = require('tailwindcss/resolveConfig');\nconst tailwindConfig = require('./tailwind.config');\n\nconst { theme } = resolveConfig(tailwindConfig);\n\n/*\n  console.log, but it returns the value that was passed in. This\n  function is useful for inspecting the value in a promise chain, or\n  when composing functions.\n\n  usage:\n    Promise.resolve(5)\n      .then(inspect) // prints 5\n      .then(five => doSomething(five))\n      .then(inspect) // prints return value of doSomething\n*/\nfunction inspect(x) {\n  console.log(x); // eslint-disable-line no-console\n  return x;\n}\n\n/*\n  check if an object has a value for every key passed in.\n\n  usage:\n    hasProps(['foo', 'bar'], { foo: 10, bar: 20 }) === true\n    hasProps(['foo', 'bar'], { bar: 20, baz: 30 }) === false\n*/\nconst hasProps = R.curry((props, obj) =>\n  R.compose(R.all(R.identity), R.values, R.pickAll(props))(obj),\n);\n\n// middleware for express validation\n// any validation errors are sent to client\nfunction handleValidation(req, res, next) {\n  const errors = validationResult(req);\n\n  if (errors.isEmpty()) {\n    next();\n  } else {\n    res.status(400).json({ errors: errors.mapped() });\n  }\n}\n\nconst handleRequestValidationError = R.curry((form, error) => {\n  const paramErrors = error.response.data.errors;\n\n  if (!paramErrors) {\n    throw error;\n  }\n\n  R.forEachObjIndexed((value, key) => {\n    form.setError(key, 'paramError', value && value.msg);\n  }, paramErrors);\n});\n\nmodule.exports = {\n  theme,\n  inspect,\n  hasProps,\n  handleValidation,\n  handleRequestValidationError,\n};\n","module.exports = {\n  // example from: https://tailwindcss.com/docs/configuring-variants/\n  variants: {\n    textColor: ['responsive', 'hover', 'focus', 'group-hover'],\n    backgroundColor: ['responsive', 'hover', 'focus', 'group-hover'],\n  },\n  theme: {\n    extend: {\n      fontFamily: {\n        display: ['Raleway', 'sans-serif'],\n      },\n    },\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst classes = [\n  'rounded-lg',\n  'bg-gray-200',\n  'px-3',\n  'py-2',\n  'border',\n  'border-solid',\n  'border-transparent',\n  'outline-none',\n].join(' ');\nconst focused = 'focus:bg-white focus:border-gray-400';\nconst hovered = 'hover:border-gray-400';\n\nconst Input = React.forwardRef(({ className, ...rest }, ref) => (\n  <input\n    className={`${classes} ${hovered} ${focused} ${className}`}\n    ref={ref}\n    {...rest}\n  />\n));\n\nInput.propTypes = {\n  className: PropTypes.string,\n};\n\nInput.defaultProps = {\n  className: '',\n};\n\nexport default Input;\n"],"sourceRoot":""}